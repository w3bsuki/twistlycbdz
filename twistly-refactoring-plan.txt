# TWISTLY CBD - REFACTORING AND OPTIMIZATION PLAN

## OVERVIEW
This document outlines our structured approach to refactoring and optimizing the Twistly CBD website. The primary goals are improving code quality, reducing bundle size, and enhancing performance without breaking existing functionality.

## HOW TO USE THIS PLAN
- Each section has a STATUS that should be updated as work progresses
- Check off completed items with [x] as they're finished
- Add notes about what was changed in the PROGRESS TRACKING section
- All changes should be committed frequently with descriptive messages

---

## 1. COMPONENT ARCHITECTURE CLEANUP
**STATUS: NOT STARTED**

### 1.1 ShadCN Components Audit
- [ ] Inventory all shadcn components currently in use
- [ ] Ensure shadcn components are properly imported from @/components/ui
- [ ] Remove any duplicate implementations of shadcn components
- [ ] Standardize component usage patterns (Button, Dialog, etc.)

### 1.2 Component Organization
- [ ] Review folder structure for components
- [ ] Break large components into smaller, focused components
- [ ] Move reusable components to appropriate locations
- [ ] Create index files for better imports

### 1.3 Component Props Standardization
- [ ] Create consistent interfaces for component props
- [ ] Add proper TypeScript typing to all components
- [ ] Fix any prop drilling issues with context or composition
- [ ] Document component props with JSDoc comments

---

## 2. STATE MANAGEMENT OPTIMIZATION
**STATUS: NOT STARTED**

### 2.1 Context Evaluation
- [ ] Review all contexts and their usage
- [ ] Consolidate overlapping contexts
- [ ] Optimize context providers to prevent unnecessary re-renders
- [ ] Add proper memoization for context values

### 2.2 State Logic Cleanup
- [ ] Review useState and useReducer implementations
- [ ] Fix any state leaks or improper cleanup
- [ ] Ensure proper loading/error states for all async operations
- [ ] Implement proper data fetching patterns

---

## 3. PERFORMANCE OPTIMIZATIONS
**STATUS: NOT STARTED**

### 3.1 Component Rendering
- [ ] Add React.memo for appropriate components
- [ ] Fix dependency arrays in useEffect and useCallback
- [ ] Implement virtualization for long lists
- [ ] Eliminate unnecessary re-renders

### 3.2 Image Optimization
- [ ] Ensure all images use next/image with proper dimensions
- [ ] Implement responsive image sizing
- [ ] Convert decorative images to CSS where appropriate
- [ ] Optimize image quality vs file size

### 3.3 Bundle Size Reduction
- [ ] Implement code splitting for large components
- [ ] Remove unused libraries and imports
- [ ] Analyze bundle with tools like "npm run analyze"
- [ ] Optimize third-party dependencies

---

## 4. UI AND STYLING CLEANUP
**STATUS: IN PROGRESS**

### 4.1 Tailwind Usage
- [ ] Standardize Tailwind class usage
- [ ] Create Tailwind component classes for repeated patterns
- [x] Fix inconsistent spacing and sizing
- [ ] Ensure proper responsive design implementation

### 4.2 Animation System
- [ ] Review all Framer Motion animations
- [ ] Create centralized animation configs
- [ ] Fix any janky or inconsistent animations
- [ ] Ensure animations respect reduced motion preferences

### 4.3 Design Consistency
- [ ] Audit color usage across the site
- [x] Standardize typography implementation
- [x] Ensure consistent spacing between elements
- [ ] Create proper dark mode implementation

---

## 5. DEAD CODE REMOVAL
**STATUS: NOT STARTED**

### 5.1 Component Pruning
- [ ] Identify and remove unused components
- [ ] Delete redundant implementations
- [ ] Remove commented-out code
- [ ] Consolidate similar components

### 5.2 Asset Cleanup
- [ ] Remove unused images and assets
- [ ] Organize assets into appropriate folders
- [ ] Standardize asset naming conventions
- [ ] Optimize SVG files

### 5.3 Dependency Cleanup
- [ ] Audit package.json for unused dependencies
- [ ] Update outdated dependencies with caution
- [ ] Remove unnecessary polyfills
- [ ] Document essential dependencies

---

## 6. ACCESSIBILITY IMPROVEMENTS
**STATUS: NOT STARTED**

### 6.1 Semantic HTML
- [ ] Ensure proper HTML structure throughout the site
- [ ] Fix heading hierarchy issues
- [ ] Add appropriate ARIA attributes
- [ ] Implement proper focus management

### 6.2 Keyboard Navigation
- [ ] Test and fix keyboard navigation throughout the site
- [ ] Ensure all interactive elements are keyboard accessible
- [ ] Implement proper focus indicators
- [ ] Add keyboard shortcuts where appropriate

### 6.3 Screen Reader Compatibility
- [ ] Test with screen readers
- [ ] Add alt text to all images
- [ ] Ensure proper form labels
- [ ] Fix any hidden content issues

---

## 7. TESTING AND QUALITY ASSURANCE
**STATUS: NOT STARTED**

### 7.1 Cross-browser Testing
- [ ] Test in Chrome, Firefox, Safari, and Edge
- [ ] Ensure mobile compatibility
- [ ] Fix any browser-specific issues
- [ ] Document any required polyfills

### 7.2 Performance Testing
- [ ] Run Lighthouse audits
- [ ] Measure and optimize Core Web Vitals
- [ ] Test loading performance on slow connections
- [ ] Optimize critical rendering path

### 7.3 Functionality Testing
- [ ] Test all interactive elements
- [ ] Verify form submissions
- [ ] Check all navigation links
- [ ] Ensure cart and checkout functionality

---

## PROGRESS TRACKING

### Completed Work
*(Update this section as tasks are completed)*

**Date: 2024-09-13**
- Section worked on: UI and Styling Cleanup, Bug Fixes
- Components modified: 
  - src/app/health-and-wellness/page.tsx
  - src/hooks/index.ts
- Issues fixed:
  - Fixed inconsistent text height in research card checkmarks on health conditions page
  - Fixed hook export name mismatch (useMobile â†’ useIsMobile) that was causing build failures
- Improvements made:
  - Ensured consistent vertical spacing in all cards of the health conditions section
  - Standardized export names in hooks index to match the actual hook implementation names

### Current Focus
- Priority for next work session:
  - Continue UI consistency improvements across the site
  - Check for and fix any other hook naming inconsistencies
  - Implement standardized text heights for card elements throughout the application
  - Review other component exports for potential naming mismatches

- Known issues to address:
  - Verify deployment success after hook export fix
  - Look for similar text consistency issues in other cards/components

### Outstanding Issues
- List any known bugs or issues discovered during refactoring

---

## LAUNCH CHECKLIST
**STATUS: NOT STARTED**

- [ ] All critical bugs fixed
- [ ] Performance meets targets (Lighthouse score > 90)
- [ ] Cross-browser compatibility verified
- [ ] Mobile responsiveness confirmed
- [ ] SEO elements properly implemented
- [ ] Analytics properly configured
- [ ] Final content review completed
- [ ] Accessibility standards met
- [ ] 404 and error pages working
- [ ] Final client approval obtained 